import { NgModule, InjectionToken, APP_INITIALIZER, TransferState, makeEnvironmentProviders, } from '@angular/core';
import { appInitializerFactory } from './internals';
import * as i0 from "@angular/core";
export const LOTTIE_SERVER_OPTIONS = new InjectionToken('LottieServerOptions');
export class LottieServerModule {
    static forRoot(options) {
        return {
            ngModule: LottieServerModule,
            providers: [
                {
                    provide: LOTTIE_SERVER_OPTIONS,
                    useValue: options,
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInitializerFactory,
                    multi: true,
                    deps: [LOTTIE_SERVER_OPTIONS, TransferState],
                },
            ],
        };
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: LottieServerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    /** @nocollapse */ static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: LottieServerModule }); }
    /** @nocollapse */ static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: LottieServerModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: LottieServerModule, decorators: [{
            type: NgModule
        }] });
export function provideLottieServerOptions(options) {
    return makeEnvironmentProviders([
        {
            provide: LOTTIE_SERVER_OPTIONS,
            useValue: options,
        },
        {
            provide: APP_INITIALIZER,
            useFactory: appInitializerFactory,
            multi: true,
            deps: [LOTTIE_SERVER_OPTIONS, TransferState],
        },
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG90dGllLXNlcnZlci5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neC1sb3R0aWUvc2VydmVyL3NyYy9sb3R0aWUtc2VydmVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsUUFBUSxFQUVSLGNBQWMsRUFDZCxlQUFlLEVBQ2YsYUFBYSxFQUNiLHdCQUF3QixHQUN6QixNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxhQUFhLENBQUM7O0FBRXBELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUFzQixxQkFBcUIsQ0FBQyxDQUFDO0FBR3BHLE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUE0QjtRQUN6QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLHFCQUFxQjtvQkFDOUIsUUFBUSxFQUFFLE9BQU87aUJBQ2xCO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxlQUFlO29CQUN4QixVQUFVLEVBQUUscUJBQXFCO29CQUNqQyxLQUFLLEVBQUUsSUFBSTtvQkFDWCxJQUFJLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxhQUFhLENBQUM7aUJBQzdDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQztpSUFqQlUsa0JBQWtCO2tJQUFsQixrQkFBa0I7a0lBQWxCLGtCQUFrQjs7MkZBQWxCLGtCQUFrQjtrQkFEOUIsUUFBUTs7QUFxQlQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLE9BQTRCO0lBQ3JFLE9BQU8sd0JBQXdCLENBQUM7UUFDOUI7WUFDRSxPQUFPLEVBQUUscUJBQXFCO1lBQzlCLFFBQVEsRUFBRSxPQUFPO1NBQ2xCO1FBQ0Q7WUFDRSxPQUFPLEVBQUUsZUFBZTtZQUN4QixVQUFVLEVBQUUscUJBQXFCO1lBQ2pDLEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFLENBQUMscUJBQXFCLEVBQUUsYUFBYSxDQUFDO1NBQzdDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE5nTW9kdWxlLFxuICBNb2R1bGVXaXRoUHJvdmlkZXJzLFxuICBJbmplY3Rpb25Ub2tlbixcbiAgQVBQX0lOSVRJQUxJWkVSLFxuICBUcmFuc2ZlclN0YXRlLFxuICBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBMb3R0aWVTZXJ2ZXJPcHRpb25zIH0gZnJvbSAnLi9zeW1ib2xzJztcbmltcG9ydCB7IGFwcEluaXRpYWxpemVyRmFjdG9yeSB9IGZyb20gJy4vaW50ZXJuYWxzJztcblxuZXhwb3J0IGNvbnN0IExPVFRJRV9TRVJWRVJfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxMb3R0aWVTZXJ2ZXJPcHRpb25zPignTG90dGllU2VydmVyT3B0aW9ucycpO1xuXG5ATmdNb2R1bGUoKVxuZXhwb3J0IGNsYXNzIExvdHRpZVNlcnZlck1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KG9wdGlvbnM6IExvdHRpZVNlcnZlck9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPExvdHRpZVNlcnZlck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTG90dGllU2VydmVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBMT1RUSUVfU0VSVkVSX09QVElPTlMsXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnMsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgICAgdXNlRmFjdG9yeTogYXBwSW5pdGlhbGl6ZXJGYWN0b3J5LFxuICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICAgIGRlcHM6IFtMT1RUSUVfU0VSVkVSX09QVElPTlMsIFRyYW5zZmVyU3RhdGVdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTG90dGllU2VydmVyT3B0aW9ucyhvcHRpb25zOiBMb3R0aWVTZXJ2ZXJPcHRpb25zKSB7XG4gIHJldHVybiBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMoW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IExPVFRJRV9TRVJWRVJfT1BUSU9OUyxcbiAgICAgIHVzZVZhbHVlOiBvcHRpb25zLFxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICAgICAgdXNlRmFjdG9yeTogYXBwSW5pdGlhbGl6ZXJGYWN0b3J5LFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgICBkZXBzOiBbTE9UVElFX1NFUlZFUl9PUFRJT05TLCBUcmFuc2ZlclN0YXRlXSxcbiAgICB9LFxuICBdKTtcbn1cbiJdfQ==