import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { AnimationLoader } from '../animation-loader';
import * as i0 from "@angular/core";
export class CacheableAnimationLoader extends AnimationLoader {
    constructor() {
        super(...arguments);
        this.cache = new Map();
    }
    ngOnDestroy() {
        this.cache.clear();
    }
    loadAnimation(options) {
        return this.player$.pipe(map(player => {
            const animationItem = this.createAnimationItem(player, this.transformOptions(options));
            this.awaitConfigAndCache(options, animationItem);
            return animationItem;
        }));
    }
    awaitConfigAndCache(options, animationItem) {
        if (this.isAnimationConfigWithPath(options)) {
            // Don't wait for the `config_ready` event if it has been cached previously.
            if (this.cache.has(options.path)) {
                return;
            }
            animationItem.addEventListener('config_ready', () => {
                // See the comments below on why we're storing the animation data as a string.
                this.cache.set(options.path, JSON.stringify(animationItem['animationData']));
            });
        }
    }
    transformOptions(options) {
        if (this.isAnimationConfigWithPath(options) && this.cache.has(options.path)) {
            return {
                ...options,
                path: undefined,
                // Caretaker note: `lottie-web` cannot re-use the `animationData` object between animations, and we
                // have to retrieve a new object each time an animation is created.
                // https://github.com/airbnb/lottie-web#html
                // See comments for the `animationData` property.
                animationData: JSON.parse(this.cache.get(options.path)),
            };
        }
        else {
            return options;
        }
    }
    isAnimationConfigWithPath(options) {
        return typeof options.path === 'string';
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CacheableAnimationLoader, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CacheableAnimationLoader, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: CacheableAnimationLoader, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVhYmxlLWFuaW1hdGlvbi1sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC1sb3R0aWUvc3JjL2xpYi9jYWNoZWFibGUtYW5pbWF0aW9uLWxvYWRlci9jYWNoZWFibGUtYW5pbWF0aW9uLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7O0FBSXRELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxlQUFlO0lBRDdEOztRQUVVLFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztLQXdEM0M7SUF0REMsV0FBVztRQUNULElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUEwRDtRQUN0RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDWCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3ZGLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDakQsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTyxtQkFBbUIsQ0FDekIsT0FBMEQsRUFDMUQsYUFBNEI7UUFFNUIsSUFBSSxJQUFJLENBQUMseUJBQXlCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUM1Qyw0RUFBNEU7WUFDNUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSyxDQUFDLEVBQUUsQ0FBQztnQkFDbEMsT0FBTztZQUNULENBQUM7WUFFRCxhQUFhLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtnQkFDbEQsOEVBQThFO2dCQUM5RSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDO0lBRU8sZ0JBQWdCLENBQ3RCLE9BQTBEO1FBRTFELElBQUksSUFBSSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFLLENBQUMsRUFBRSxDQUFDO1lBQzdFLE9BQU87Z0JBQ0wsR0FBRyxPQUFPO2dCQUNWLElBQUksRUFBRSxTQUFTO2dCQUNmLG1HQUFtRztnQkFDbkcsbUVBQW1FO2dCQUNuRSw0Q0FBNEM7Z0JBQzVDLGlEQUFpRDtnQkFDakQsYUFBYSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUssQ0FBRSxDQUFDO2FBQzFELENBQUM7UUFDSixDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUM7SUFDSCxDQUFDO0lBRU8seUJBQXlCLENBQy9CLE9BQWdDO1FBRWhDLE9BQU8sT0FBTyxPQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztJQUMxQyxDQUFDO2lJQXhEVSx3QkFBd0I7cUlBQXhCLHdCQUF3QixjQURYLE1BQU07OzJGQUNuQix3QkFBd0I7a0JBRHBDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEFuaW1hdGlvbkxvYWRlciB9IGZyb20gJy4uL2FuaW1hdGlvbi1sb2FkZXInO1xuaW1wb3J0IHsgQW5pbWF0aW9uSXRlbSwgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEsIEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoIH0gZnJvbSAnLi4vc3ltYm9scyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgQ2FjaGVhYmxlQW5pbWF0aW9uTG9hZGVyIGV4dGVuZHMgQW5pbWF0aW9uTG9hZGVyIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBjYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5jYWNoZS5jbGVhcigpO1xuICB9XG5cbiAgbG9hZEFuaW1hdGlvbihvcHRpb25zOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheWVyJC5waXBlKFxuICAgICAgbWFwKHBsYXllciA9PiB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbkl0ZW0gPSB0aGlzLmNyZWF0ZUFuaW1hdGlvbkl0ZW0ocGxheWVyLCB0aGlzLnRyYW5zZm9ybU9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgICB0aGlzLmF3YWl0Q29uZmlnQW5kQ2FjaGUob3B0aW9ucywgYW5pbWF0aW9uSXRlbSk7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25JdGVtO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgYXdhaXRDb25maWdBbmRDYWNoZShcbiAgICBvcHRpb25zOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICAgIGFuaW1hdGlvbkl0ZW06IEFuaW1hdGlvbkl0ZW0sXG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgob3B0aW9ucykpIHtcbiAgICAgIC8vIERvbid0IHdhaXQgZm9yIHRoZSBgY29uZmlnX3JlYWR5YCBldmVudCBpZiBpdCBoYXMgYmVlbiBjYWNoZWQgcHJldmlvdXNseS5cbiAgICAgIGlmICh0aGlzLmNhY2hlLmhhcyhvcHRpb25zLnBhdGghKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFuaW1hdGlvbkl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY29uZmlnX3JlYWR5JywgKCkgPT4ge1xuICAgICAgICAvLyBTZWUgdGhlIGNvbW1lbnRzIGJlbG93IG9uIHdoeSB3ZSdyZSBzdG9yaW5nIHRoZSBhbmltYXRpb24gZGF0YSBhcyBhIHN0cmluZy5cbiAgICAgICAgdGhpcy5jYWNoZS5zZXQob3B0aW9ucy5wYXRoISwgSlNPTi5zdHJpbmdpZnkoYW5pbWF0aW9uSXRlbVsnYW5pbWF0aW9uRGF0YSddKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHRyYW5zZm9ybU9wdGlvbnMoXG4gICAgb3B0aW9uczogQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEgfCBBbmltYXRpb25Db25maWdXaXRoUGF0aCxcbiAgKTogQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEgfCBBbmltYXRpb25Db25maWdXaXRoUGF0aCB7XG4gICAgaWYgKHRoaXMuaXNBbmltYXRpb25Db25maWdXaXRoUGF0aChvcHRpb25zKSAmJiB0aGlzLmNhY2hlLmhhcyhvcHRpb25zLnBhdGghKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgcGF0aDogdW5kZWZpbmVkLFxuICAgICAgICAvLyBDYXJldGFrZXIgbm90ZTogYGxvdHRpZS13ZWJgIGNhbm5vdCByZS11c2UgdGhlIGBhbmltYXRpb25EYXRhYCBvYmplY3QgYmV0d2VlbiBhbmltYXRpb25zLCBhbmQgd2VcbiAgICAgICAgLy8gaGF2ZSB0byByZXRyaWV2ZSBhIG5ldyBvYmplY3QgZWFjaCB0aW1lIGFuIGFuaW1hdGlvbiBpcyBjcmVhdGVkLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL2xvdHRpZS13ZWIjaHRtbFxuICAgICAgICAvLyBTZWUgY29tbWVudHMgZm9yIHRoZSBgYW5pbWF0aW9uRGF0YWAgcHJvcGVydHkuXG4gICAgICAgIGFuaW1hdGlvbkRhdGE6IEpTT04ucGFyc2UodGhpcy5jYWNoZS5nZXQob3B0aW9ucy5wYXRoISkhKSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaXNBbmltYXRpb25Db25maWdXaXRoUGF0aChcbiAgICBvcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgKTogb3B0aW9ucyBpcyBBbmltYXRpb25Db25maWdXaXRoUGF0aCB7XG4gICAgcmV0dXJuIHR5cGVvZiBvcHRpb25zLnBhdGggPT09ICdzdHJpbmcnO1xuICB9XG59XG4iXX0=