import { Injectable, NgZone, inject, ɵisPromise } from '@angular/core';
import { Observable, from, of } from 'rxjs';
import { map, mergeMap, shareReplay, tap } from 'rxjs/operators';
import { LOTTIE_OPTIONS, } from './symbols';
import * as i0 from "@angular/core";
function convertPlayerOrLoaderToObservable() {
    const ngZone = inject(NgZone);
    const { player, useWebWorker } = inject(LOTTIE_OPTIONS);
    const playerOrLoader = ngZone.runOutsideAngular(() => player());
    // We need to use `isPromise` instead of checking whether
    // `result instanceof Promise`. In zone.js patched environments, `global.Promise`
    // is the `ZoneAwarePromise`. Some APIs, which are likely not patched by zone.js
    // for certain reasons, might not work with `instanceof`. For instance, the dynamic
    // import `() => import('./chunk.js')` returns a native promise (not a `ZoneAwarePromise`),
    // causing this check to be falsy.
    const player$ = ɵisPromise(playerOrLoader)
        ? from(playerOrLoader).pipe(map(module => module.default || module))
        : of(playerOrLoader);
    return player$.pipe(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    tap(player => player.useWebWorker?.(useWebWorker)), shareReplay({ bufferSize: 1, refCount: true }));
}
export class AnimationLoader {
    constructor() {
        this.player$ = convertPlayerOrLoaderToObservable().pipe(mergeMap(player => raf$(this.ngZone).pipe(map(() => player))));
        this.ngZone = inject(NgZone);
    }
    loadAnimation(options) {
        return this.player$.pipe(map(player => this.createAnimationItem(player, options)));
    }
    resolveOptions(options, container) {
        return Object.assign({
            container,
            renderer: 'svg',
            loop: true,
            autoplay: true,
        }, options);
    }
    createAnimationItem(player, options) {
        return this.ngZone.runOutsideAngular(() => player.loadAnimation(options));
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AnimationLoader, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AnimationLoader, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: AnimationLoader, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
function raf$(ngZone) {
    return new Observable(subscriber => {
        const requestId = ngZone.runOutsideAngular(() => requestAnimationFrame(() => {
            subscriber.next();
            subscriber.complete();
        }));
        return () => cancelAnimationFrame(requestId);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4LWxvdHRpZS9zcmMvbGliL2FuaW1hdGlvbi1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWpFLE9BQU8sRUFDTCxjQUFjLEdBTWYsTUFBTSxXQUFXLENBQUM7O0FBRW5CLFNBQVMsaUNBQWlDO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QixNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN4RCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNoRSx5REFBeUQ7SUFDekQsaUZBQWlGO0lBQ2pGLGdGQUFnRjtJQUNoRixtRkFBbUY7SUFDbkYsMkZBQTJGO0lBQzNGLGtDQUFrQztJQUNsQyxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLENBQUM7UUFDcEUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUV2QixPQUFPLE9BQU8sQ0FBQyxJQUFJO0lBQ2pCLDhEQUE4RDtJQUM5RCxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBRSxNQUFjLENBQUMsWUFBWSxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsRUFDM0QsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDL0MsQ0FBQztBQUNKLENBQUM7QUFHRCxNQUFNLE9BQU8sZUFBZTtJQUQ1QjtRQUVZLFlBQU8sR0FBRyxpQ0FBaUMsRUFBRSxDQUFDLElBQUksQ0FDMUQsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FDOUQsQ0FBQztRQUVNLFdBQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0E2QmpDO0lBM0JDLGFBQWEsQ0FDWCxPQUEwRDtRQUUxRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFRCxjQUFjLENBQ1osT0FBZ0MsRUFDaEMsU0FBc0I7UUFFdEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUNsQjtZQUNFLFNBQVM7WUFDVCxRQUFRLEVBQUUsS0FBSztZQUNmLElBQUksRUFBRSxJQUFJO1lBQ1YsUUFBUSxFQUFFLElBQUk7U0FDZixFQUNELE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVTLG1CQUFtQixDQUMzQixNQUFvQixFQUNwQixPQUEwRDtRQUUxRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7aUlBakNVLGVBQWU7cUlBQWYsZUFBZSxjQURGLE1BQU07OzJGQUNuQixlQUFlO2tCQUQzQixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7QUFxQ2xDLFNBQVMsSUFBSSxDQUFDLE1BQWM7SUFDMUIsT0FBTyxJQUFJLFVBQVUsQ0FBTyxVQUFVLENBQUMsRUFBRTtRQUN2QyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQzlDLHFCQUFxQixDQUFDLEdBQUcsRUFBRTtZQUN6QixVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUNILENBQUM7UUFDRixPQUFPLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSwgaW5qZWN0LCDJtWlzUHJvbWlzZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBtZXJnZU1hcCwgc2hhcmVSZXBsYXksIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgTE9UVElFX09QVElPTlMsXG4gIExvdHRpZVBsYXllcixcbiAgQW5pbWF0aW9uSXRlbSxcbiAgQW5pbWF0aW9uT3B0aW9ucyxcbiAgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxufSBmcm9tICcuL3N5bWJvbHMnO1xuXG5mdW5jdGlvbiBjb252ZXJ0UGxheWVyT3JMb2FkZXJUb09ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxMb3R0aWVQbGF5ZXI+IHtcbiAgY29uc3Qgbmdab25lID0gaW5qZWN0KE5nWm9uZSk7XG4gIGNvbnN0IHsgcGxheWVyLCB1c2VXZWJXb3JrZXIgfSA9IGluamVjdChMT1RUSUVfT1BUSU9OUyk7XG4gIGNvbnN0IHBsYXllck9yTG9hZGVyID0gbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHBsYXllcigpKTtcbiAgLy8gV2UgbmVlZCB0byB1c2UgYGlzUHJvbWlzZWAgaW5zdGVhZCBvZiBjaGVja2luZyB3aGV0aGVyXG4gIC8vIGByZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlYC4gSW4gem9uZS5qcyBwYXRjaGVkIGVudmlyb25tZW50cywgYGdsb2JhbC5Qcm9taXNlYFxuICAvLyBpcyB0aGUgYFpvbmVBd2FyZVByb21pc2VgLiBTb21lIEFQSXMsIHdoaWNoIGFyZSBsaWtlbHkgbm90IHBhdGNoZWQgYnkgem9uZS5qc1xuICAvLyBmb3IgY2VydGFpbiByZWFzb25zLCBtaWdodCBub3Qgd29yayB3aXRoIGBpbnN0YW5jZW9mYC4gRm9yIGluc3RhbmNlLCB0aGUgZHluYW1pY1xuICAvLyBpbXBvcnQgYCgpID0+IGltcG9ydCgnLi9jaHVuay5qcycpYCByZXR1cm5zIGEgbmF0aXZlIHByb21pc2UgKG5vdCBhIGBab25lQXdhcmVQcm9taXNlYCksXG4gIC8vIGNhdXNpbmcgdGhpcyBjaGVjayB0byBiZSBmYWxzeS5cbiAgY29uc3QgcGxheWVyJCA9IMm1aXNQcm9taXNlKHBsYXllck9yTG9hZGVyKVxuICAgID8gZnJvbShwbGF5ZXJPckxvYWRlcikucGlwZShtYXAobW9kdWxlID0+IG1vZHVsZS5kZWZhdWx0IHx8IG1vZHVsZSkpXG4gICAgOiBvZihwbGF5ZXJPckxvYWRlcik7XG5cbiAgcmV0dXJuIHBsYXllciQucGlwZShcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHRhcChwbGF5ZXIgPT4gKHBsYXllciBhcyBhbnkpLnVzZVdlYldvcmtlcj8uKHVzZVdlYldvcmtlcikpLFxuICAgIHNoYXJlUmVwbGF5KHsgYnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWUgfSksXG4gICk7XG59XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uTG9hZGVyIHtcbiAgcHJvdGVjdGVkIHBsYXllciQgPSBjb252ZXJ0UGxheWVyT3JMb2FkZXJUb09ic2VydmFibGUoKS5waXBlKFxuICAgIG1lcmdlTWFwKHBsYXllciA9PiByYWYkKHRoaXMubmdab25lKS5waXBlKG1hcCgoKSA9PiBwbGF5ZXIpKSksXG4gICk7XG5cbiAgcHJpdmF0ZSBuZ1pvbmUgPSBpbmplY3QoTmdab25lKTtcblxuICBsb2FkQW5pbWF0aW9uKFxuICAgIG9wdGlvbnM6IEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhIHwgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgsXG4gICk6IE9ic2VydmFibGU8QW5pbWF0aW9uSXRlbT4ge1xuICAgIHJldHVybiB0aGlzLnBsYXllciQucGlwZShtYXAocGxheWVyID0+IHRoaXMuY3JlYXRlQW5pbWF0aW9uSXRlbShwbGF5ZXIsIG9wdGlvbnMpKSk7XG4gIH1cblxuICByZXNvbHZlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBBbmltYXRpb25PcHRpb25zIHwgbnVsbCxcbiAgICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICApOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICByZW5kZXJlcjogJ3N2ZycsXG4gICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgIGF1dG9wbGF5OiB0cnVlLFxuICAgICAgfSxcbiAgICAgIG9wdGlvbnMsXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVBbmltYXRpb25JdGVtKFxuICAgIHBsYXllcjogTG90dGllUGxheWVyLFxuICAgIG9wdGlvbnM6IEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhIHwgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgsXG4gICk6IEFuaW1hdGlvbkl0ZW0ge1xuICAgIHJldHVybiB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBwbGF5ZXIubG9hZEFuaW1hdGlvbihvcHRpb25zKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmFmJChuZ1pvbmU6IE5nWm9uZSkge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGU8dm9pZD4oc3Vic2NyaWJlciA9PiB7XG4gICAgY29uc3QgcmVxdWVzdElkID0gbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBzdWJzY3JpYmVyLm5leHQoKTtcbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgfSksXG4gICAgKTtcbiAgICByZXR1cm4gKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxdWVzdElkKTtcbiAgfSk7XG59XG4iXX0=